import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.JFileChooser;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Administrator
 */
public class MainUI extends javax.swing.JFrame implements ActionListener {
    
    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        initListener();
        initCombobox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

    	mainPanel = new javax.swing.JPanel();
        TabbedPane = new javax.swing.JTabbedPane();
        historyPanel = new javax.swing.JPanel();
        hisComboBox = new javax.swing.JComboBox();
        his_Button = new javax.swing.JButton();
        hisPanel1 = new javax.swing.JPanel();
        testPanel = new ChartPanel(null);
        timeComboBox0 = new javax.swing.JComboBox();
        timeComboBox1 = new javax.swing.JComboBox();
        toLabel = new javax.swing.JLabel();
        timeComboBox2 = new javax.swing.JComboBox();
        timeComboBox3 = new javax.swing.JComboBox();
        lightPointPanel = new javax.swing.JPanel();
        lightPanel0 = new javax.swing.JPanel();
        lightLabel0 = new javax.swing.JLabel();
        lightPanel1 = new javax.swing.JPanel();
        lightLabel1 = new javax.swing.JLabel();
        lightPanel2 = new javax.swing.JPanel();
        lightLabel2 = new javax.swing.JLabel();
        lightPanel3 = new javax.swing.JPanel();
        lightLabel3 = new javax.swing.JLabel();
        distencePanel = new javax.swing.JPanel();
        disLabel = new javax.swing.JLabel();
        disTextField = new javax.swing.JTextField();
        disComboBox = new javax.swing.JComboBox();
        disButton = new javax.swing.JButton();
        jPanel2 = new ChartPanel(null);
        recommendationPanel = new javax.swing.JPanel();
        recomComboBox = new javax.swing.JComboBox();
        recomButton = new javax.swing.JButton();
        recomLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        accountLabel = new javax.swing.JLabel();
        account = new javax.swing.JLabel();
        bar = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        docMenu = new javax.swing.JMenu();
        docMenuItem0 = new javax.swing.JMenuItem();
        docMenuItem1 = new javax.swing.JMenuItem();
        docMenuItem2 = new javax.swing.JMenuItem();
        accountMenu = new javax.swing.JMenu();
        accMenuItem0 = new javax.swing.JMenuItem();
        sysMenu = new javax.swing.JMenu();
        sysMenuItem0 = new javax.swing.JMenuItem();
        sysMenuItem1 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TabbedPane.setToolTipText("");
        TabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        hisComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "按分类", "按时间", "按时间区间" }));

        his_Button.setText("查询");
        his_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                his_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testPanelLayout = new javax.swing.GroupLayout(testPanel);
        testPanel.setLayout(testPanelLayout);
        testPanelLayout.setHorizontalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        testPanelLayout.setVerticalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout hisPanel1Layout = new javax.swing.GroupLayout(hisPanel1);
        hisPanel1.setLayout(hisPanel1Layout);
        hisPanel1Layout.setHorizontalGroup(
            hisPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(testPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        hisPanel1Layout.setVerticalGroup(
            hisPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(testPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        timeComboBox0.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014" }));

        timeComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        toLabel.setFont(new java.awt.Font("黑体", 0, 14)); // NOI18N
        toLabel.setText("至");

        timeComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014" }));

        timeComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hisPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(historyPanelLayout.createSequentialGroup()
                        .addComponent(hisComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(timeComboBox0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(his_Button)
                        .addContainerGap(223, Short.MAX_VALUE))))
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hisComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeComboBox0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel)
                    .addComponent(timeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(his_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hisPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPane.addTab("我的历史", historyPanel);

        javax.swing.GroupLayout lightPanel0Layout = new javax.swing.GroupLayout(lightPanel0);
        lightPanel0.setLayout(lightPanel0Layout);
        lightPanel0Layout.setHorizontalGroup(
            lightPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightPanel0Layout.createSequentialGroup()
                .addComponent(lightLabel0)
                .addGap(0, 622, Short.MAX_VALUE))
        );
        lightPanel0Layout.setVerticalGroup(
            lightPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightPanel0Layout.createSequentialGroup()
                .addComponent(lightLabel0)
                .addGap(0, 85, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout lightPanel1Layout = new javax.swing.GroupLayout(lightPanel1);
        lightPanel1.setLayout(lightPanel1Layout);
        lightPanel1Layout.setHorizontalGroup(
            lightPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightPanel1Layout.createSequentialGroup()
                .addComponent(lightLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        lightPanel1Layout.setVerticalGroup(
            lightPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightPanel1Layout.createSequentialGroup()
                .addComponent(lightLabel1)
                .addGap(0, 85, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout lightPanel2Layout = new javax.swing.GroupLayout(lightPanel2);
        lightPanel2.setLayout(lightPanel2Layout);
        lightPanel2Layout.setHorizontalGroup(
            lightPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightPanel2Layout.createSequentialGroup()
                .addComponent(lightLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        lightPanel2Layout.setVerticalGroup(
            lightPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightPanel2Layout.createSequentialGroup()
                .addComponent(lightLabel2)
                .addGap(0, 85, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout lightPanel3Layout = new javax.swing.GroupLayout(lightPanel3);
        lightPanel3.setLayout(lightPanel3Layout);
        lightPanel3Layout.setHorizontalGroup(
            lightPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightPanel3Layout.createSequentialGroup()
                .addComponent(lightLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        lightPanel3Layout.setVerticalGroup(
            lightPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightPanel3Layout.createSequentialGroup()
                .addComponent(lightLabel3)
                .addGap(0, 123, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout lightPointPanelLayout = new javax.swing.GroupLayout(lightPointPanel);
        lightPointPanel.setLayout(lightPointPanelLayout);
        lightPointPanelLayout.setHorizontalGroup(
            lightPointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lightPanel0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lightPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lightPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lightPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        lightPointPanelLayout.setVerticalGroup(
            lightPointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightPointPanelLayout.createSequentialGroup()
                .addComponent(lightPanel0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lightPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lightPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lightPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        TabbedPane.addTab("我的亮点", lightPointPanel);

        disLabel.setText("对比账号：");

        disTextField.setText("对比账号");

        disComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "按分类", "按时间" }));

        disButton.setText("查询");
        disButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout distencePanelLayout = new javax.swing.GroupLayout(distencePanel);
        distencePanel.setLayout(distencePanelLayout);
        distencePanelLayout.setHorizontalGroup(
            distencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distencePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(distencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(distencePanelLayout.createSequentialGroup()
                        .addComponent(disLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(disComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(disButton)
                        .addContainerGap(359, Short.MAX_VALUE))))
        );
        distencePanelLayout.setVerticalGroup(
            distencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distencePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(distencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(disLabel)
                    .addComponent(disTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPane.addTab("差距对比", distencePanel);

        recomComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "默认推荐", "动态规划", "贪心", "数据结构", "图论" }));

        recomButton.setText("查询");

        javax.swing.GroupLayout recommendationPanelLayout = new javax.swing.GroupLayout(recommendationPanel);
        recommendationPanel.setLayout(recommendationPanelLayout);
        recommendationPanelLayout.setHorizontalGroup(
            recommendationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recommendationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recommendationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(recommendationPanelLayout.createSequentialGroup()
                        .addComponent(recomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recomButton))
                    .addComponent(recomLabel))
                .addContainerGap(475, Short.MAX_VALUE))
        );
        recommendationPanelLayout.setVerticalGroup(
            recommendationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recommendationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recommendationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recomButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recomLabel)
                .addContainerGap(371, Short.MAX_VALUE))
        );

        TabbedPane.addTab("荐题系统", recommendationPanel);

        accountLabel.setText("当前账号：");

        account.setText("null");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(account)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(bar)
                .addGap(69, 69, 69))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(accountLabel)
                        .addComponent(account)
                        .addComponent(bar))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPane)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );

        docMenu.setBorder(null);
        docMenu.setText("文件");
        docMenu.setToolTipText("");

        docMenuItem0.setText("导出分类");
        docMenuItem0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //docMenuItem0ActionPerformed(evt);
            	String str = new String();
            	try {
            		FileReader fr = new FileReader("E:\\doc\\sort.txt");
                    BufferedReader br=new BufferedReader(fr);
                    JFileChooser jf = new JFileChooser();
                    jf.setFileSelectionMode(JFileChooser.SAVE_DIALOG | JFileChooser.DIRECTORIES_ONLY);
                    jf.showDialog(null,null);
                    File fi = jf.getSelectedFile();
                    String f = fi.getAbsolutePath()+"\\sort.txt";
                    System.out.println("save: "+f);
                    //FileWriter out = new FileWriter(f);
                    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(f))));
                    while((str = br.readLine())!=null) {
                        out.write(str);
                        out.newLine();
                        out.flush();
                    }
                    br.close();
                    out.close();
            	}
            	catch(Exception e){}
            }
        });
        docMenu.add(docMenuItem0);

        docMenuItem1.setText("导入分类");
        docMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //docMenuItem0ActionPerformed(evt);
            	JFileChooser fd = new JFileChooser();
            	//fd.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            	fd.showOpenDialog(null);
            	File sourceFile = fd.getSelectedFile();
            	String sort = "E:\\doc\\sort.txt";
            	File targetFile = new File(sort);
            	
            	if(sourceFile != null){
            		FileInputStream fi = null;
                    FileOutputStream fo = null;
                    FileChannel in = null;
                    FileChannel out = null;
                    try {
                        fi = new FileInputStream(sourceFile);
                        fo = new FileOutputStream(targetFile);
                        in = fi.getChannel();//得到对应的文件通道
                        out = fo.getChannel();//得到对应的文件通道
                        in.transferTo(0, in.size(), out);//连接两个通道，并且从in通道读取，然后写入out通道
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            fi.close();
                            in.close();
                            fo.close();
                            out.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
            	}
            	initData();
            	loadChart();
            }
        });
        docMenu.add(docMenuItem1);
        
        docMenuItem2.setText("编辑分类");
        docMenu.add(docMenuItem2);
        

        MenuBar.add(docMenu);

        accountMenu.setText("账号");

        accMenuItem0.setText("切换帐号");
        accountMenu.add(accMenuItem0);

        MenuBar.add(accountMenu);

        sysMenu.setBorder(null);
        sysMenu.setText("系统");

        sysMenuItem0.setText("更新软件");
        sysMenu.add(sysMenuItem0);

        sysMenuItem1.setText("联系我们");
        sysMenu.add(sysMenuItem1);

        MenuBar.add(sysMenu);

        helpMenu.setText("帮助");
        MenuBar.add(helpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 489, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>                        

    private void his_ButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void disButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void docMenuItem0ActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MainUI.class.getName()). log(Level.SEVERE, null, ex);
                }
                MainUI godUI = new MainUI();
                godUI.setLocationRelativeTo(null); //窗口居中
                godUI.setVisible(true);
                godUI.firstLogin();
                godUI.initData();
                godUI.loadChart();
                godUI.initLightPoint();
            }
        });
    }

 // Variables declaration - do not modify                     
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JMenuItem accMenuItem0;
    private javax.swing.JLabel account;
    private javax.swing.JLabel accountLabel;
    private javax.swing.JMenu accountMenu;
    private javax.swing.JLabel bar;
    private javax.swing.JButton disButton;
    private javax.swing.JComboBox disComboBox;
    private javax.swing.JLabel disLabel;
    private javax.swing.JTextField disTextField;
    private javax.swing.JPanel distencePanel;
    private javax.swing.JMenu docMenu;
    private javax.swing.JMenuItem docMenuItem0;
    private javax.swing.JMenuItem docMenuItem1;
    private javax.swing.JMenuItem docMenuItem2;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JComboBox hisComboBox;
    private javax.swing.JPanel hisPanel1;
    private javax.swing.JButton his_Button;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JPanel jPanel1;
    private ChartPanel jPanel2;
    private javax.swing.JLabel lightLabel0;
    private javax.swing.JLabel lightLabel1;
    private javax.swing.JLabel lightLabel2;
    private javax.swing.JLabel lightLabel3;
    private javax.swing.JPanel lightPanel0;
    private javax.swing.JPanel lightPanel1;
    private javax.swing.JPanel lightPanel2;
    private javax.swing.JPanel lightPanel3;
    private javax.swing.JPanel lightPointPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton recomButton;
    private javax.swing.JComboBox recomComboBox;
    private javax.swing.JPanel recommendationPanel;
    private javax.swing.JLabel recomLabel;
    private javax.swing.JMenu sysMenu;
    private javax.swing.JMenuItem sysMenuItem0;
    private javax.swing.JMenuItem sysMenuItem1;
    private ChartPanel testPanel;
    private javax.swing.JComboBox timeComboBox0;
    private javax.swing.JComboBox timeComboBox1;
    private javax.swing.JComboBox timeComboBox2;
    private javax.swing.JComboBox timeComboBox3;
    private javax.swing.JLabel toLabel;
 // End of variables declaration 
    
    private String user_name; //当前用户account
    private String cmp_name; //对比账号account
    private Map<String,Integer> timemap; //按时间的统计
    private Map<String,Integer> typemap; //按分类的统计
    private Map<String,Integer> cmp_timemap; //对比对象按时间的统计
    private Map<String,Integer> cmp_typemap; //对比对象按分类的统计
    private String timekey[] = new String[1000]; //按时间先后排序
    private String cmp_timekey[] = new String[1000]; //按时间先后排序
    private int num, cmp_num; // 排序后数组元素的个数
    private String t0, t1, t2, t3; //按时间区间页，默认时间
    private Map<String,Integer> usermap = new HashMap<String,Integer>(); //记录对比对象
    private ArrayList<String> titleArray = new ArrayList<String>();
    private String recomType = "默认推荐";
    
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()==hisComboBox)
        {
            int index = hisComboBox.getSelectedIndex();
            if(index==2)
            {
                timeComboBox0.setVisible(true);
                timeComboBox1.setVisible(true);
                timeComboBox2.setVisible(true);
                timeComboBox3.setVisible(true);
                toLabel.setVisible(true);
                his_Button.setVisible(true);
                
            }
            if(index==0)
            {
                timeComboBox0.setVisible(false);
                timeComboBox1.setVisible(false);
                timeComboBox2.setVisible(false);
                timeComboBox3.setVisible(false);
                toLabel.setVisible(false);
                his_Button.setVisible(false);
                testPanel.setChart(ChartCreater.typeCreateChart(ChartCreater.typeCreateDataset(typemap, user_name)));
            }
            if(index==1)
            {
                timeComboBox0.setVisible(false);
                timeComboBox1.setVisible(false);
                timeComboBox2.setVisible(false);
                timeComboBox3.setVisible(false);
                toLabel.setVisible(false);
                his_Button.setVisible(false);
                testPanel.setChart(ChartCreater.timeCreateChart(ChartCreater.timeCreateDataset(num, timemap, timekey, user_name)));
            }
        }
        if(e.getSource()==accMenuItem0)
        {
       	 	firstLogin();
            //System.out.println("11111");
            initData();
            loadChart();
        }
        if(e.getSource()==timeComboBox0)
        {
       	 t0 = (String) timeComboBox0.getSelectedItem();
        }
        if(e.getSource()==timeComboBox1)
        {
       	 t1 = (String) timeComboBox1.getSelectedItem();
        }
        if(e.getSource()==timeComboBox2)
        {
       	 t2 = (String) timeComboBox2.getSelectedItem();
        }
        if(e.getSource()==timeComboBox3)
        {
       	 t3 = (String) timeComboBox3.getSelectedItem();
        }
        if(e.getSource()==his_Button) 
        {
       	 testPanel.setChart(ChartCreater.timeCreateChart(ChartCreater.timeCreateDataset2(t0, t1, t2, t3, timemap, user_name)));
        }
        if(e.getSource()==disButton)
        {
        	cmp_name = disTextField.getText();
        	//System.out.println(cmp_name);
        	//System.out.println(cmpmap.containsKey(cmp_name));
        	if(!usermap.containsKey(cmp_name)) {
        		InfoDownload cmp = new InfoDownload();
        		if(cmp.init(cmp_name)) {
        			usermap.put(cmp_name, 1);
        			cmp.getinfo();
        		}
        		else {
        			JOptionPane.showMessageDialog(null, "账号不存在");
        		}
        	}
        	if(usermap.containsKey(cmp_name)) {
        		DataCount cmp_dc = new DataCount();
        		cmp_dc.init(cmp_name);
        		cmp_timemap = cmp_dc.getdata();
    			cmp_typemap = cmp_dc.countType();
    			sort_cmp_time();
    			int index = disComboBox.getSelectedIndex();
    			if(index==0) {
    				jPanel2.setChart(ChartCreater.typeCreateChart(ChartCreater.typeCreateDataset2(typemap, user_name, cmp_typemap, cmp_name)));
    			}
    			else if(index==1) {
    				jPanel2.setChart(ChartCreater.timeCreateChart(ChartCreater.timeCreateDataset3(num, timemap, timekey, user_name, 
    						   cmp_num, cmp_timekey, cmp_timemap, cmp_name)));
    			}
        	}
        		
        }
        if(e.getSource()==recomComboBox) {
        	recomType = recomComboBox.getSelectedItem().toString();
        }
        if(e.getSource()==recomButton) {
        	showRecomTitle(recomType);
        }
   }

   private void initListener() {
       his_Button.addActionListener(this);
       disButton.addActionListener(this);
       recomButton.addActionListener(this);
       hisComboBox.addActionListener(this);
       accMenuItem0.addActionListener(this);
       timeComboBox0.addActionListener(this);
       timeComboBox1.addActionListener(this);
       timeComboBox2.addActionListener(this);
       timeComboBox3.addActionListener(this);
       recomButton.addActionListener(this);
       recomComboBox.addActionListener(this);
   }
   
   
   private void showRecomTitle(String type) {
	   if(type.equals("默认推荐")) {
		   String text = "<html>";
		   text += "1595 1730 2017 2084 2723";
		   text = text + "<html\\>";
		   recomLabel.setText(text);
		   return;
	   }
	   titleArray = TypeTitle.getTypeTitle(recomType);
	   String text = "<html>";
	   int index = 0;
	   for(String tmp:titleArray) {
		   text = text + tmp + "   ";
		   index++;
		   if(index%7==0)
			   text = text + "<br \\><br \\>";
	   }
	   text = text + "<html\\>";
	   recomLabel.setText(text);
	   
   }
   
   private void firstLogin() {
       boolean flag = true;
       String tip = "请输入账号";
       while(flag) {
           String input = JOptionPane.showInputDialog(null, tip, "", WIDTH);
           if(input==null) {
        	   if(user_name==null)
        		   continue;
        	   else
        		   break;
           }
           if(usermap.containsKey(input)) {
        	   user_name = input;
        	   account.setText(user_name);
        	   break;
           }
           InfoDownload info_obj = new InfoDownload();
           if(info_obj.init(input)) {
        	   user_name = input;
        	   info_obj.getinfo();
               usermap.put(user_name, 1);
               account.setText(user_name);
               flag = false;
           }
           else {
               tip = "账号不存在，请重新输入";
           }
       }
   }


   //获取分类的题数

  private void loadChart() {
   	testPanel.setChart(ChartCreater.typeCreateChart(ChartCreater.typeCreateDataset(typemap, user_name)));
   	//testPanel.setPreferredSize(new Dimension(1000,400));
   }
   
 private void initData() {
       
       //System.out.println("33333333");
       DataCount dc = new DataCount();
       dc.init(user_name);
       timemap = dc.getdata();
       //排序
       num = 0;
       Iterator<String> iter = timemap.keySet().iterator();
       while(iter.hasNext()) {
           //System.out.println("44444444");
            String ss = iter.next();
            //System.out.println(ss);
            timekey[num] = ss;
            num++;
       }
       //冒泡
       for(int i=0; i<num-1; i++)
       {
       	for(int j=0; j<num-i-1; j++)
       	{
       		int j0 = Integer.parseInt(timekey[j]);
       		int j1 = Integer.parseInt(timekey[j+1]);
       		if(j0 > j1)
       		{
       			String tmp;
       			tmp = timekey[j]; timekey[j] = timekey[j+1]; timekey[j+1] = tmp;
       		}
       	}
       }
       /*
       for(int i=0; i<num; i++) {
       	System.out.println(timekey[i]);
       }
       */
       
       Iterator<String> itertime = timemap.keySet().iterator();
       while(itertime.hasNext()) {
            String ss = itertime.next();
            //System.out.println(ss+" "+timemap.get(ss));
       }
       typemap = dc.countType();
       Iterator<String> itertype = typemap.keySet().iterator();
       while(itertype.hasNext()) {
           //System.out.println("44444444");
            String ss = itertype.next();
            //System.out.println(ss+" "+typemap.get(ss));
       }
       
   }
 private void initLightPoint()
	{
		String str[] = DataCount.firstAccept(user_name);
		String label0 = "你的排名为【" + str[0] + "】" + ",已完成【" + str[1] + "】道题";
		String label1 = "你有【" + str[2] + "】道题第一次提交就获得Accept";
		int num = 0;
		String label2 = "你在 ";
		Iterator<String> itertime = timemap.keySet().iterator();
		while(itertime.hasNext()) {
			String ss = itertime.next();
			int numm = timemap.get(ss);
			if(numm>=50) {
				label2 = label2 + "【" + ss.substring(0, 4) + "年" + ss.substring(4, 6) + "月" + "】 ";
				num++;
			}
		}
		label2 = label2 + "完成了【50】道题以上";
		lightLabel0.setText(label0);
		lightPanel0.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		lightLabel1.setText(label1);
		lightPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		if(num>0) {
			lightLabel2.setText(label2);
			lightPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		}
	}
   
   private void sort_cmp_time() {
	   cmp_num = 0;
       Iterator<String> iter = cmp_timemap.keySet().iterator();
       while(iter.hasNext()) {
            String ss = iter.next();
            cmp_timekey[cmp_num] = ss;
            cmp_num++;
       }
       //冒泡
	   for(int i=0; i<cmp_num-1; i++)
	   {
			for(int j=0; j<cmp_num-i-1; j++)
			{
				int j0 = Integer.parseInt(cmp_timekey[j]);
				int j1 = Integer.parseInt(cmp_timekey[j+1]);
				if(j0 > j1)
				{
					String tmp;
					tmp = cmp_timekey[j]; cmp_timekey[j] = cmp_timekey[j+1]; cmp_timekey[j+1] = tmp;
				}
			}
	   }
   }
   
   private void initCombobox() {
      timeComboBox0.setVisible(false);
      timeComboBox1.setVisible(false);
      timeComboBox2.setVisible(false);
      timeComboBox3.setVisible(false);
      toLabel.setVisible(false);
      his_Button.setVisible(false);
      t0 = "2004";
      t1 = "01";
      t2 = "2004";
      t3 = "01";
      helpMenu.setVisible(false);
      //docMenuItem0.setVisible(false);
   }
}