import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Administrator
 */
public class MainUI extends javax.swing.JFrame implements ActionListener {
    String Zimu[] = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}; 

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        initListener();
        initCombobox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        TabbedPane = new javax.swing.JTabbedPane();
        mainPagePanel = new javax.swing.JPanel();
        accountLabel = new javax.swing.JLabel();
        account = new javax.swing.JLabel();
        historyPanel = new javax.swing.JPanel();
        hisComboBox = new javax.swing.JComboBox();
        his_Button = new javax.swing.JButton();
        hisPanel1 = new javax.swing.JPanel();
        testPanel = new ChartPanel(null);
        timeComboBox0 = new javax.swing.JComboBox();
        timeComboBox1 = new javax.swing.JComboBox();
        toLabel = new javax.swing.JLabel();
        timeComboBox2 = new javax.swing.JComboBox();
        timeComboBox3 = new javax.swing.JComboBox();
        lightPointPanel = new javax.swing.JPanel();
        distencePanel = new javax.swing.JPanel();
        disLabel = new javax.swing.JLabel();
        disTextField = new javax.swing.JTextField();
        disComboBox = new javax.swing.JComboBox();
        disButton = new javax.swing.JButton();
        recommendationPanel = new javax.swing.JPanel();
        recomComboBox = new javax.swing.JComboBox();
        recomButton = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        docMenu = new javax.swing.JMenu();
        docMenuItem0 = new javax.swing.JMenuItem();
        docMenuItem1 = new javax.swing.JMenuItem();
        accountMenu = new javax.swing.JMenu();
        accMenuItem0 = new javax.swing.JMenuItem();
        sysMenu = new javax.swing.JMenu();
        sysMenuItem0 = new javax.swing.JMenuItem();
        sysMenuItem1 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TabbedPane.setToolTipText("");
        TabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        accountLabel.setFont(new java.awt.Font("黑体", 0, 14)); // NOI18N
        accountLabel.setText("账号：");

        account.setFont(new java.awt.Font("黑体", 0, 14)); // NOI18N
        account.setText("null");

        javax.swing.GroupLayout mainPagePanelLayout = new javax.swing.GroupLayout(mainPagePanel);
        mainPagePanel.setLayout(mainPagePanelLayout);
        mainPagePanelLayout.setHorizontalGroup(
            mainPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(account)
                .addContainerGap(542, Short.MAX_VALUE))
        );
        mainPagePanelLayout.setVerticalGroup(
            mainPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountLabel)
                    .addComponent(account))
                .addContainerGap(434, Short.MAX_VALUE))
        );

        TabbedPane.addTab("主页", mainPagePanel);

        hisComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "按分类", "按时间", "按时间区间" }));

        his_Button.setText("查询");
        his_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                his_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testPanelLayout = new javax.swing.GroupLayout(testPanel);
        testPanel.setLayout(testPanelLayout);
        testPanelLayout.setHorizontalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        testPanelLayout.setVerticalGroup(
            testPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout hisPanel1Layout = new javax.swing.GroupLayout(hisPanel1);
        hisPanel1.setLayout(hisPanel1Layout);
        hisPanel1Layout.setHorizontalGroup(
            hisPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hisPanel1Layout.createSequentialGroup()
                .addComponent(testPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        hisPanel1Layout.setVerticalGroup(
            hisPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hisPanel1Layout.createSequentialGroup()
                .addComponent(testPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 321, Short.MAX_VALUE))
        );

        timeComboBox0.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014" }));

        timeComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        toLabel.setFont(new java.awt.Font("黑体", 0, 14)); // NOI18N
        toLabel.setText("至");

        timeComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014" }));

        timeComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(historyPanelLayout.createSequentialGroup()
                        .addComponent(hisPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(213, 213, 213))
                    .addGroup(historyPanelLayout.createSequentialGroup()
                        .addComponent(hisComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(timeComboBox0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(his_Button)
                        .addContainerGap(229, Short.MAX_VALUE))))
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hisComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeComboBox0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel)
                    .addComponent(timeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(his_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hisPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPane.addTab("我的历史", historyPanel);

        javax.swing.GroupLayout lightPointPanelLayout = new javax.swing.GroupLayout(lightPointPanel);
        lightPointPanel.setLayout(lightPointPanelLayout);
        lightPointPanelLayout.setHorizontalGroup(
            lightPointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        lightPointPanelLayout.setVerticalGroup(
            lightPointPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 460, Short.MAX_VALUE)
        );

        TabbedPane.addTab("我的亮点", lightPointPanel);

        disLabel.setText("对比账号：");

        disTextField.setText("对比账号");

        disComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "按分类", "按时间" }));

        disButton.setText("查询");
        disButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout distencePanelLayout = new javax.swing.GroupLayout(distencePanel);
        distencePanel.setLayout(distencePanelLayout);
        distencePanelLayout.setHorizontalGroup(
            distencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distencePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(disLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(disTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(disComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(disButton)
                .addContainerGap(365, Short.MAX_VALUE))
        );
        distencePanelLayout.setVerticalGroup(
            distencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distencePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(distencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(disLabel)
                    .addComponent(disTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(disButton))
                .addContainerGap(427, Short.MAX_VALUE))
        );

        TabbedPane.addTab("差距对比", distencePanel);

        recomComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "默认推荐", "动态规划", "贪心", "数据结构", "图论" }));

        recomButton.setText("查询");

        javax.swing.GroupLayout recommendationPanelLayout = new javax.swing.GroupLayout(recommendationPanel);
        recommendationPanel.setLayout(recommendationPanelLayout);
        recommendationPanelLayout.setHorizontalGroup(
            recommendationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recommendationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recomButton)
                .addContainerGap(481, Short.MAX_VALUE))
        );
        recommendationPanelLayout.setVerticalGroup(
            recommendationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recommendationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recommendationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recomButton))
                .addContainerGap(427, Short.MAX_VALUE))
        );

        TabbedPane.addTab("荐题系统", recommendationPanel);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPane)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPane)
        );

        docMenu.setBorder(null);
        docMenu.setText("文件");
        docMenu.setToolTipText("");

        docMenuItem0.setText("导出文件");
        docMenuItem0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docMenuItem0ActionPerformed(evt);
            }
        });
        docMenu.add(docMenuItem0);

        docMenuItem1.setText("导入分类");
        docMenu.add(docMenuItem1);

        MenuBar.add(docMenu);

        accountMenu.setText("账号");

        accMenuItem0.setText("切换帐号");
        accountMenu.add(accMenuItem0);

        MenuBar.add(accountMenu);

        sysMenu.setBorder(null);
        sysMenu.setText("系统");

        sysMenuItem0.setText("更新软件");
        sysMenu.add(sysMenuItem0);

        sysMenuItem1.setText("联系我们");
        sysMenu.add(sysMenuItem1);

        MenuBar.add(sysMenu);

        helpMenu.setText("帮助");
        MenuBar.add(helpMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void his_ButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void disButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void docMenuItem0ActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MainUI.class.getName()). log(Level.SEVERE, null, ex);
                }
                MainUI godUI = new MainUI();
                godUI.setLocationRelativeTo(null); //窗口居中
                godUI.setVisible(true);
//                try {
//                    Thread.sleep(1000);
//                } catch (InterruptedException ex) {
//                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
//                }
                godUI.firstLogin();
                //System.out.println("11111");
                godUI.initData();
                godUI.loadChart();
                //System.out.println("22222");
                /*
                Map<String,Integer> k = godUI.countType();
                Iterator<String> iterator = typemap.keySet().iterator();
                while(iterator.hasNext()) {
                     String ss = iterator.next();
                     System.out.println(ss+" "+k.get(ss));
                }
                  */      
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JMenuItem accMenuItem0;
    private javax.swing.JLabel account;
    private javax.swing.JLabel accountLabel;
    private javax.swing.JMenu accountMenu;
    private javax.swing.JButton disButton;
    private javax.swing.JComboBox disComboBox;
    private javax.swing.JLabel disLabel;
    private javax.swing.JTextField disTextField;
    private javax.swing.JPanel distencePanel;
    private javax.swing.JMenu docMenu;
    private javax.swing.JMenuItem docMenuItem0;
    private javax.swing.JMenuItem docMenuItem1;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JComboBox hisComboBox;
    private javax.swing.JPanel hisPanel1;
    private javax.swing.JButton his_Button;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JPanel lightPointPanel;
    private javax.swing.JPanel mainPagePanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton recomButton;
    private javax.swing.JComboBox recomComboBox;
    private javax.swing.JPanel recommendationPanel;
    private javax.swing.JMenu sysMenu;
    private javax.swing.JMenuItem sysMenuItem0;
    private javax.swing.JMenuItem sysMenuItem1;
    private ChartPanel testPanel;
    private javax.swing.JComboBox timeComboBox0;
    private javax.swing.JComboBox timeComboBox1;
    private javax.swing.JComboBox timeComboBox2;
    private javax.swing.JComboBox timeComboBox3;
    private javax.swing.JLabel toLabel;
    // End of variables declaration                   
    private String user_name;
    private Map<String,Integer> timemap;
    private Map<String,Integer> typemap;
    private String timekey[] = new String[1000];
    private int num;
    private String t0, t1, t2, t3;
    
    public void actionPerformed(ActionEvent e) {
         if(e.getSource()==hisComboBox)
         {
             int index = hisComboBox.getSelectedIndex();
             if(index==2)
             {
                 timeComboBox0.setVisible(true);
                 timeComboBox1.setVisible(true);
                 timeComboBox2.setVisible(true);
                 timeComboBox3.setVisible(true);
                 toLabel.setVisible(true);
                 his_Button.setVisible(true);
                 
             }
             if(index==0)
             {
                 timeComboBox0.setVisible(false);
                 timeComboBox1.setVisible(false);
                 timeComboBox2.setVisible(false);
                 timeComboBox3.setVisible(false);
                 toLabel.setVisible(false);
                 his_Button.setVisible(false);
                 testPanel.setChart(typeCreateChart(typeCreateDataset()));
             }
             if(index==1)
             {
                 timeComboBox0.setVisible(false);
                 timeComboBox1.setVisible(false);
                 timeComboBox2.setVisible(false);
                 timeComboBox3.setVisible(false);
                 toLabel.setVisible(false);
                 his_Button.setVisible(false);
                 testPanel.setChart(timeCreateChart(timeCreateDataset()));
             }
         }
         if(e.getSource()==accMenuItem0)
         {
        	 firstLogin();
             //System.out.println("11111");
             initData();
             loadChart();
         }
         if(e.getSource()==timeComboBox0)
         {
        	 t0 = (String) timeComboBox0.getSelectedItem();
         }
         if(e.getSource()==timeComboBox1)
         {
        	 t1 = (String) timeComboBox1.getSelectedItem();
         }
         if(e.getSource()==timeComboBox2)
         {
        	 t2 = (String) timeComboBox2.getSelectedItem();
         }
         if(e.getSource()==timeComboBox3)
         {
        	 t3 = (String) timeComboBox3.getSelectedItem();
         }
         if(e.getSource()==his_Button) 
         {
        	 testPanel.setChart(timeCreateChart(timeCreateDataset2()));
         }
    }

    private void initListener() {
        his_Button.addActionListener(this);
        disButton.addActionListener(this);
        recomButton.addActionListener(this);
        hisComboBox.addActionListener(this);
        accMenuItem0.addActionListener(this);
        timeComboBox0.addActionListener(this);
        timeComboBox1.addActionListener(this);
        timeComboBox2.addActionListener(this);
        timeComboBox3.addActionListener(this);
    }
    
    public CategoryDataset typeCreateDataset() {
        
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        Iterator<String> itertype = typemap.keySet().iterator();
        int index = 0;
        while(itertype.hasNext()) {
             String ss = itertype.next();
             dataset.setValue(typemap.get(ss),Zimu[index],ss);
             index++;
        }
        return dataset;
    }

    public  JFreeChart typeCreateChart(CategoryDataset dataset) //用数据集创建一个图表
    {
        JFreeChart chart=ChartFactory.createBarChart("hi", "类别", 
                "题数", dataset, PlotOrientation.VERTICAL, true, true, false); //创建一个JFreeChart
        chart.setTitle(new TextTitle("按分类题数",new Font("宋体",Font.BOLD+Font.ITALIC,20)));//可以重新设置标题，替换“hi”标题
        CategoryPlot plot=(CategoryPlot)chart.getPlot();//获得图标中间部分，即plot
        CategoryAxis categoryAxis=plot.getDomainAxis();//获得横坐标
        categoryAxis.setLabelFont(new Font("黑体",Font.BOLD,16));//设置横坐标字体
        return chart;
    }
    
    public  CategoryDataset timeCreateDataset2() //创建柱状图数据集
    {
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        //System.out.println(t0+t1+t2+t3);
        int a0 = Integer.parseInt(t0);
        int a1 = Integer.parseInt(t1);
        int a2 = Integer.parseInt(t2);
        int a3 = Integer.parseInt(t3);
        int index = 0;
        for(int i=a0; i<=a2; i++)
        {
        	int l=1, r=12;
        	if(i==a0) l = a1;
        	if(i==a2) r = a3;
        	for(int j=l; j<=r; j++)
        	{
        		String ss = "";
        		ss = ss + String.valueOf(i);
        		if(j<10) ss = ss + "0" + String.valueOf(j);
        		else ss = ss + String.valueOf(j);
        		if(timemap.containsKey(ss)) {
        			dataset.setValue(timemap.get(ss), Zimu[index], ss);
        			index++;
        		}
        	}
        }
        return dataset;
    }
    
    public  CategoryDataset timeCreateDataset() //创建柱状图数据集
    {
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        for(int i=0; i<num; i++) {
        	dataset.setValue(timemap.get(timekey[i]),Zimu[i],timekey[i]);
        }
        return dataset;
    }
    
    public  JFreeChart timeCreateChart(CategoryDataset dataset) //用数据集创建一个图表
    {
        JFreeChart chart=ChartFactory.createBarChart("hi", "时间", 
                "题数", dataset, PlotOrientation.VERTICAL, true, true, false); //创建一个JFreeChart
        chart.setTitle(new TextTitle("按时间题数",new Font("仿宋",Font.BOLD+Font.ITALIC,20)));//可以重新设置标题，替换“hi”标题
        CategoryPlot plot=(CategoryPlot)chart.getPlot();//获得图标中间部分，即plot
        CategoryAxis categoryAxis=plot.getDomainAxis();//获得横坐标
        categoryAxis.setLabelFont(new Font("仿宋",Font.BOLD,16));//设置横坐标字体
        return chart;
    }
    
    public  CategoryDataset createDataset() //创建柱状图数据集
    {
        DefaultCategoryDataset dataset=new DefaultCategoryDataset();
        dataset.setValue(10,"a","管理人员");
        dataset.setValue(20,"b","市场人员");
        dataset.setValue(40,"c","开发人员");
        dataset.setValue(15,"d","其他人员");
        return dataset;
    }
    
    public  JFreeChart createChart(CategoryDataset dataset) //用数据集创建一个图表
    {
        JFreeChart chart=ChartFactory.createBarChart("hi", "人员分布", 
                "人员数量", dataset, PlotOrientation.VERTICAL, true, true, false); //创建一个JFreeChart
        chart.setTitle(new TextTitle("某公司组织结构图",new Font("仿宋",Font.BOLD+Font.ITALIC,20)));//可以重新设置标题，替换“hi”标题
        CategoryPlot plot=(CategoryPlot)chart.getPlot();//获得图标中间部分，即plot
        CategoryAxis categoryAxis=plot.getDomainAxis();//获得横坐标
        categoryAxis.setLabelFont(new Font("仿宋",Font.BOLD,20));//设置横坐标字体
        return chart;
    }
    
    
    public void firstLogin() {
        boolean flag = true;
        String tip = "请输入账号";
        while(flag) {
            user_name = JOptionPane.showInputDialog(null, tip, "", WIDTH);
            
            InfoDownload info_obj = new InfoDownload();
            if(info_obj.init(user_name)) {
                info_obj.getinfo();
                account.setText(user_name);
                flag = false;
            }
            else {
                tip = "账号不存在，请重新输入";
            }
                    
            /*
            account.setText(user_name);
            flag = false;
        */
        }
    }


    //获取分类的题数
    public Map<String,Integer> countType() {
        //System.out.println("55555");
        String profile ="E:\\doc\\"+ user_name + "_profile.txt";
        String sort = "E:\\doc\\sort.txt";
        Map<String, String> sort_map = new HashMap<String, String>();
        Map<String, Integer> ret = new HashMap<String, Integer>();
        try {
            BufferedReader sort_reader = new BufferedReader(new FileReader(new File(sort)));
            String line, s[], ss[];
            while((line=sort_reader.readLine())!=null) {
                //System.out.println(line);
                s = line.split(" ");
                //System.out.println(s[0]+"->"+s[1]);
                sort_map.put(s[0], s[1]);
            }
            //System.out.println("111");
            //System.out.println(user_name);
            //System.out.println("222");
            BufferedReader profile_reader = new BufferedReader(new FileReader(new File(profile)));
            while((line=profile_reader.readLine())!=null) {
                //System.out.println(line);
                ss = line.split("[-:\\t]+");
                //sss = ss[3].split("	");
                //System.out.println(ss[5]);
                //System.out.println(sss[0]);
                //s[6]题号
                //System.out.println(ss[5]);
                if(sort_map.containsKey(ss[5])) {
                    String type = sort_map.get(ss[5]);
                    if(ret.containsKey(type)) {
                        ret.put(type, ret.get(type)+1);
                    }
                    else {
                        ret.put(type, 1);
                    }
                }
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ret;
    }
    private void loadChart() {
    	testPanel.setChart(typeCreateChart(typeCreateDataset()));
    }
    
    private void initData() {
        typemap = countType();
        Iterator<String> itertype = typemap.keySet().iterator();
        while(itertype.hasNext()) {
            //System.out.println("44444444");
             String ss = itertype.next();
             System.out.println(ss+" "+typemap.get(ss));
        }
        //System.out.println("33333333");
        DataCount dc = new DataCount();
        dc.init(user_name);
        timemap = dc.getdata();
        //排序
        num = 0;
        Iterator<String> iter = timemap.keySet().iterator();
        while(iter.hasNext()) {
            //System.out.println("44444444");
             String ss = iter.next();
             //System.out.println(ss);
             timekey[num] = ss;
             num++;
        }
        //冒泡
        for(int i=0; i<num-1; i++)
        {
        	for(int j=0; j<num-i-1; j++)
        	{
        		int j0 = Integer.parseInt(timekey[j]);
        		int j1 = Integer.parseInt(timekey[j+1]);
        		if(j0 > j1)
        		{
        			String tmp;
        			tmp = timekey[j]; timekey[j] = timekey[j+1]; timekey[j+1] = tmp;
        		}
        	}
        }
        for(int i=0; i<num; i++) {
        	System.out.println(timekey[i]);
        }
        
        Iterator<String> itertime = timemap.keySet().iterator();
        while(itertime.hasNext()) {
             String ss = itertime.next();
             System.out.println(ss+" "+timemap.get(ss));
        }
        
    }
    
    private void initCombobox() {
       timeComboBox0.setVisible(false);
       timeComboBox1.setVisible(false);
       timeComboBox2.setVisible(false);
       timeComboBox3.setVisible(false);
       toLabel.setVisible(false);
       his_Button.setVisible(false);
       t0 = "2004";
       t1 = "01";
       t2 = "2004";
       t3 = "01";
    }
}
